version: '3.8'

services:
  # Redis untuk queue persistence
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - distributed-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Lock Manager Nodes
  lock-node-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: lock-node-1
    environment:
      - NODE_ID=1
      - NODE_HOST=lock-node-1
      - NODE_PORT=5000
      - PEERS=lock-node-2:5000,lock-node-3:5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    ports:
      - "5001:5000"
    networks:
      - distributed-network
    depends_on:
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.nodes.lock_manager"]

  lock-node-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: lock-node-2
    environment:
      - NODE_ID=2
      - NODE_HOST=lock-node-2
      - NODE_PORT=5000
      - PEERS=lock-node-1:5000,lock-node-3:5000
      - REDIS_HOST=redis
      - LOG_LEVEL=INFO
    ports:
      - "5002:5000"
    networks:
      - distributed-network
    depends_on:
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.nodes.lock_manager"]

  lock-node-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: lock-node-3
    environment:
      - NODE_ID=3
      - NODE_HOST=lock-node-3
      - NODE_PORT=5000
      - PEERS=lock-node-1:5000,lock-node-2:5000
      - REDIS_HOST=redis
      - LOG_LEVEL=INFO
    ports:
      - "5003:5000"
    networks:
      - distributed-network
    depends_on:
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.nodes.lock_manager"]

  # Queue Nodes
  queue-node-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: queue-node-1
    environment:
      - NODE_ID=1
      - NODE_HOST=queue-node-1
      - NODE_PORT=6000
      - PEERS=queue-node-2:6000,queue-node-3:6000
      - REDIS_HOST=redis
    ports:
      - "6001:6000"
    networks:
      - distributed-network
    depends_on:
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.nodes.queue_node"]

  queue-node-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: queue-node-2
    environment:
      - NODE_ID=2
      - NODE_HOST=queue-node-2
      - NODE_PORT=6000
      - PEERS=queue-node-1:6000,queue-node-3:6000
      - REDIS_HOST=redis
    ports:
      - "6002:6000"
    networks:
      - distributed-network
    depends_on:
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.nodes.queue_node"]

  queue-node-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: queue-node-3
    environment:
      - NODE_ID=3
      - NODE_HOST=queue-node-3
      - NODE_PORT=6000
      - PEERS=queue-node-1:6000,queue-node-2:6000
      - REDIS_HOST=redis
    ports:
      - "6003:6000"
    networks:
      - distributed-network
    depends_on:
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.nodes.queue_node"]

  # Cache Nodes
  cache-node-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: cache-node-1
    environment:
      - NODE_ID=1
      - NODE_HOST=cache-node-1
      - NODE_PORT=7000
      - PEERS=cache-node-2:7000,cache-node-3:7000
      - CACHE_SIZE=1000
      - CACHE_POLICY=LRU
    ports:
      - "7001:7000"
    networks:
      - distributed-network
    command: ["python", "-m", "src.nodes.cache_node"]

  cache-node-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: cache-node-2
    environment:
      - NODE_ID=2
      - NODE_HOST=cache-node-2
      - NODE_PORT=7000
      - PEERS=cache-node-1:7000,cache-node-3:7000
      - CACHE_SIZE=1000
    ports:
      - "7002:7000"
    networks:
      - distributed-network
    command: ["python", "-m", "src.nodes.cache_node"]

  cache-node-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: cache-node-3
    environment:
      - NODE_ID=3
      - NODE_HOST=cache-node-3
      - NODE_PORT=7000
      - PEERS=cache-node-1:7000,cache-node-2:7000
      - CACHE_SIZE=1000
    ports:
      - "7003:7000"
    networks:
      - distributed-network
    command: ["python", "-m", "src.nodes.cache_node"]

networks:
  distributed-network:
    driver: bridge

volumes:
  redis_data:
